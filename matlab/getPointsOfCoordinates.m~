% function points = getPointsOfCoordinates(puncturePoint)

% Dartboard Durchmesser=34cm; in Pixel (für 72dpi) = 964px
% 340mm - 964       -> Durchmesser Dartboard
% 1mm - 2,8352941176
% 31,8mm - 90,16    -> Durchmesser SingelBull
% 12,7mm - 36,01    -> Durchmesser Bull
% 8mm - 22,68       -> Breite Double+Tripple Felder
% 107mm - 303,38    -> Abstand äußerer Tripple-Ring
radiusBoard = 964/2;
double = [radiusBoard  radiusBoard-22.68];
single1 = [double(1) 303.38];
tripple = [single1(2) single1(2)-22.68];
single2 = [tripple(2) 45];
singleBull = [single2(2) 18];
bull = [singleBull(2) 0];

boardCenter = [500 50

puncturePoint = [1, 2];
pX = puncturePoint(1);
pY = puncturePoint(2);

keySet = [-9:8 9:26 27:44 45:62 63:80 81:98 99:116 117:134 135:152 153:170 171:180 -179:-172 -171:-154 -153:-136 -135:-118 -117:-100 -99:-82 -81:-64 -63:-46 -45:-28 -27:-10];
valueSet = [];
for i = 1:20
    for k = 1:18
        valueSet = [valueSet, i];
    end
end

% create KeyValuePair from keySet & valueSet
kvp = containers.Map(keySet,valueSet);

% angle as radian
thetaRad = atan2(pY, pX);
%angle in degree
thetaDeg = rad2deg(thetaRad);

% distance of puncture point to board center
distance = sqrt(pX^2 + pY^2);


if distance > radiusBoard
    points = 0;
elseif double(1) > distance >= double(2)
    points = kvp(thetaDeg) * 2;
elseif single1(1) > distance >= single1(2)
    points = kvp(thetaDeg);
elseif tripple(1) > distance >= tripple(2)
    points = kvp(thetaDeg) * 3;
elseif single2(1) > distance >= single2(2)
    points = kvp(thetaDeg);
elseif singleBull(1) > distance >= singleBull(2)
    points = 25;
elseif bull(1) > distance >= bull(2)
    points = 50;
else
    points = 0;
end



% end